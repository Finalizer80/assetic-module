<?php

declare(strict_types=1);

namespace AsseticBundleTest;

use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;
use Laminas\ServiceManager;
use Assetic;
use Fabiang\AsseticBundle;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-17 at 11:53:23.
 */
final class FilterManagerTest extends TestCase
{

    use ProphecyTrait;

    private AsseticBundle\FilterManager $object;
    private ServiceManager\ServiceManager $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->service = new ServiceManager\ServiceManager();
        $this->object  = new AsseticBundle\FilterManager($this->service);
    }

    /**
     * @dataProvider getAliasHasFalseProvider
     */
    public function testHasFalse(string $alias): void
    {
        $this->assertFalse($this->object->has($alias));
    }

    public function getAliasHasFalseProvider(): array
    {
        return [
            'simple'       => [
                '$alias' => 'simpleName',
            ],
            'invalid name' => [
                '$alias' => '@_simpleName',
            ],
        ];
    }

    /**
     * @dataProvider getAliasGetExceptionProvider
     */
    public function testGetException(string $alias): void
    {
        $this->expectException(AsseticBundle\Exception\InvalidArgumentException::class);
        $this->object->get($alias);
    }

    public function getAliasGetExceptionProvider(): array
    {
        return [
            'no existing'  => [
                '$alias' => 'simpleName',
            ],
            'invalid name' => [
                '$alias' => '@_simpleName',
            ],
        ];
    }

    /**
     * @dataProvider getAliasGetExceptionInstanceProvider
     */
    public function testGetExceptionInstance(string $alias, object $object): void
    {
        $this->expectException(AsseticBundle\Exception\InvalidArgumentException::class);
        $this->service->setService($alias, $object);
        $this->object->get($alias);
    }

    public function getAliasGetExceptionInstanceProvider(): array
    {
        return [
            'simple' => [
                '$alias'  => 'simpleName',
                '$object' => new \stdClass(),
            ],
        ];
    }

    /**
     * @dataProvider getAliasGetValidProvider
     */
    public function testGetValid(string $alias, object $object): void
    {
        $this->assertInstanceOf(\Assetic\Contracts\Filter\FilterInterface::class, $object);
        $this->service->setService($alias, $object);
        $result = $this->object->get($alias);
        $this->assertInstanceOf('Assetic\Filter\FilterInterface', $result);
        $this->assertSame($result, $object);
    }

    public function getAliasGetValidProvider(): array
    {
        return [
            'simple' => [
                '$alias'  => 'simpleName',
                '$object' => $this->prophesize(\Assetic\Contracts\Filter\FilterInterface::class)->reveal(),
            ],
        ];
    }

}
